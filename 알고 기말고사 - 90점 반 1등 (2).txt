1. graph coloring, hamiltonian cycle 코드 빈칸
- promissing아님 단순한 백트래킹 코드의 바디

2. memorization function 코드빈칸
- 2회 재귀호출, 1회 마킹

3. dijkstra's algorithm 왜 최단경로인가? 
- 빈칸뚫고 이어서 증명해야됨

4. prim's algorithm 보조정리에서 모든 edge의 가중치 다를 때 증명
- 빈칸뚫고 이어서 증명해야됨

5. Huffman's algorithm 코드 출력 빈칸
-재귀 호출 2회 
-배열에 쓰기 2회

6. 해밀턴 회로 -> TSP 인스턴스 변환하기

7. Kruscal's algorithm
find, merge연산의 최대횟수, 최소횟수의 문제
-2m번 2*(n-1)번

8. find연산에서 트리의 높이 최대 log2N
n= 1...9까지 나옴 로그값 쓰기

9. TSP BOUND함수 2가지 종류 
1) X와 Y라는 바운드함수가 있고
각각의 값이 A B이다 무엇을 택해야 하는가? 더 Optimal에 가까운거
2) X와 Y라는 바운드함수가 있고 
둘의 결과값이 같다. 무엇을 택해야 하는가?
그 값은 무엇인가? 
-> 문제에서 소수로 나올거임, 13.5 정수로 바꿔야됨!!! 14 (주의)

10. NP complete O / X 문제 졸라 많음(10-20개?)
-> 수업시간에 했던 명제
예시)
presburger arithmetic problem은 NP - complete 문제인가?
TSP의 Optimization problem은 np - easy인가?
TSP의 Optimization problem은 np - hard인가?
TSP의 Optimization problem과 Decision problem은 다항식 알고리즘의 존재유무의 관점에서는 같다.
등등 이런 단순한 명제들 이지만 헷갈리니 반드시 꼭 정확히 숙지하고 들어가도록 - 종이한 장에 명제들 쫙 정리하는 것 추천 
수업시간에 다뤘던 np나 p, np-complete, np-hard, np-easy, np - equivalent 의 정의는 반드시 숙지하고
문제들 간의 관계 -> 이거는 np고 저거는 np-complete고 이 문제가 저 문제로 변환가능하고 등등 그런류의 사실들 알아 놓기
transformation이 다항시간에 된다. 안된다 -> 이해 반드시 할 것 -> 직접 verification 해보는 것 추천 -> 해밀턴 회로에서 그래프의 edge증

11. 2 - graph coloring BFS version 빈칸나옴 -> cross edge에 대한 개념 숙지하면 간단 큐에서 인접노드 넣는 작업 전에 방문했었니? 여부 확인 if(u.visit) 이런식으로 

$$ 중간고사와 달리 자작문제는 없지만, 코드 빈칸이 많고 생각해야하는 증명이 많기 때문에 평소에 공부할 때 많이 생각해 놓도록 이상 $$
